=head1 NAME

Temma - An HTML + Perl template processor

=head1 SYNOPSIS

  <!DOCTYPE html>
  <html lang=en t:params="$app">
  <title t:parse><t:text value=" $app->title ">
  
  <h1><t:text value=" $app->title "></h1>
  <ul>
    <t:for as=$item x=" $app->items ">
      <li><a pl:href=" $item->url "><t:text value=" $item->title "></a>
    </t:for>
  </ul>

  use Temma;
  use Path::Class;
  $f = file ("template.html.tm");
  binmode $fh, ':utf8';
  Temma->process_document ($f => $fh);

=head1 DESCRIPTION

Temma is a template processing engine for genearating HTML or plain
text documents.  It converts a template document written in Temma
markup language, with zero or more parameters, into an HTML document,
HTML fragment, or plain text.

=head1 MODULES AND DOCUMENTS

L<Temma> - A simplified interface to Temma parser and processor.

L<Temma::Language> - A documentation for the Temma markup language.

L<Temma::Parser> - A parser to convert a textual representation of
Temma template document into its DOM representation.

L<Temma::Processor> - A processor to convert the DOM representation of
a Temma template document into result HTML/plain text document.

=head1 METHODS

The C<Temma> module defines following methods.  Note that the C<Temma>
module does not expose all functionalities implemented by Temma parser
and processor.

=over 4

=item Temma->process_html ($input => $fh, $cb)

Parse the input as Temma template source document for a complete HTML
document and write the result document to the file handle.

The first argument must be the character string representing the
source document or the L<Path::Class::File> object representing the
file in which the source document is contained.  If the file is
specified, its content must be a UTF-8 encoded Temma source document.

The second argument must be the object which has the C<print> method
that receives the character string to be written.

The third argument must be the code reference, which is invoked when
the parsing and processing has been done.  The code reference is not
expected to throw any exception.

Examples:

  use Temma;
  
  open my $fh, '>', 'path/to/output.html' or die $!;
  binmode $fh, ':utf8';
  Temma->process_html (q{<p><t:if x=1>Hello!</t:if>}, $fh, sub {
    $cv->send;
  });

  use Temma;
  
  open my $fh, '>', 'path/to/output.html' or die $!;
  binmode $fh, ':utf8';
  my $input_f = file ('path/to/input.html.tm');
  Temma->process_html ($input_f, $fh, sub {
    $cv->send;
  });

=item Temma->process_html_fragment ($input => $fh, $cb)

Parse the input as Temma template source document for an HTML fragment
and write the result document to the file handle.

For arguments, see description for the C<process_html> method.

=item Temma->process_plain_text ($input => $fh, $cb)

Parse the input as Temma template source document for a plain text
document and write the result document to the file handle.

For arguments, see description for the C<process_html> method.

=item $Temma::Locale

The locale object used to process the input.  The locale object set to
the variable when the aforemetioned methods are used to process the
input.  For more information on requirements for the locale object,
see L<Temma::Processor>.

=back

=head1 DESIGN GOALS

=head2 Requirements

=over 4

=item Syntax-awareness.

The processor must understand the document format (e.g. HTML) such
that it can encode data appropriately as required by the context.  In
other words, it can't require authors to HTML-escape all text
fragments to embed into the document.  The processor must support at
least HTML and plain text formats.

=item Streamability.

It must be possible for the processor to generate the output
incrementally.

=item Author-friendliness.

The format should not force authors to learn stupid custom language to
access data from outside of the template.  It may embed Perl code for
that purpose.

=item Easyness-to-write.

The format should not be so verbose.  Authoring of documents in the
format should be as easy as HTML, and must be much more easy than XML.

=item Error tolerance.

The processing must be error tolerant.  A small error should not abort
the entire process.  Error handling must be explicitly performed such
that authors can predict what will happen if something unexpected has
occurred.

=item Internationalization.

The format should be well-integrated with internationalization
framework.  In particular, it should provide convinience way(s) to
reference texts in text catalog for the currently-selected language.
However, it must not force the application to use any specific
internationalization framework.

=back

It is not required for the processor to always generate conforming
HTML document.  It's template author's (or, in fact, application's)
responsibility to ensure the result document being conforming.  (It
does not mean it should be more easy for authors to generate
non-conforming documents than to generate conforming documents.)

=head2 Design restrictions

=over 4

=item Reusability of HTML/XML tokenizer.

Don't introduce custom syntax at tokenization stage.

=item DOM compatibility.

A document must be fully representable as a DOM tree.  Note that the
document format don't have to be able to represent any possible DOM
tree.

=item No parser-level script execution.

No Perl (or any other programming language) code should be executed
until the DOM tree is completely constructed by the parser.

=back

=head1 DEPENDENCY

Temma requires Perl 5.8 or later.  In addition, it is built on top of
manakai, which requires perl-charclass modules.  They are registered
as submodules of the Git repository.

=head1 DEVELOPMENT

Latest version of Temma implementation is available in the Git
repository: <https://github.com/wakaba/temma> or
<http://suika.fam.cx/gate/git/wi/web/temma.git/tree>.

Tests are run at Temma CI <http://travis-ci.org/wakaba/temma>.

=head1 AUTHOR

Wakaba <w@suika.fam.cx>.

=head1 LICENSE

Copyright 2012 Wakaba <w@suika.fam.cx>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
