=head1 NAME

Temma::Processor - A processor for the Temma template language

=head1 SYNOPSIS

  use Temma::Processor;
  
  $processor = Temma::Processor->new;
  $processor->locale ($locale);
  
  $processor->process_document ($doc => $fh);
  $processor->process_fragment ($doc => $fh);
  $processor->process_plain_text ($doc => $fh);

=head1 DESCRIPTION

The C<Temma::Processor> module is an implementation of Temma
Processor.  It processes the source template document and obtains the
serialized representation of the result (or transformed) document.

For more information on the Temma template language, see
L<Temma::Language>.

=head1 METHODS

Following methods are available to instantiate the processor object
and initialize the object:

=over 4

=item $processor = Temma::Processor->new

Create a new instance of the Temma processor.

=item $processor->onerror ($code)

=item $code = $processor->onerror

Get or set the error handler.  The default error handler used if no
error handler is specified is to warn the description of the error.

For more information on error handler, see L<Whatpm::Error>
<https://github.com/wakaba/manakai/blob/master/lib/Whatpm/Errors.pod>.
For list of error types, see
<https://suika.fam.cx/gate/2007/html/error-description#temma>.

=item $dids = $processor->di_data_set

=item $processor->di_data_set ($dids)

Get or set the "di" data set for the processor.  It is used for
reporting errors.

The value should not be set while the processor is running.  If the
value is changed, the result is undefined.

See also SuikaWiki:manakai index data structure
<https://wiki.suikawiki.org/n/manakai%20index%20data%20structures>.

=item $processor->locale ($locale)

=item $locale = $processor->locale

Get or set the locale object.  See later section for the requirements
of the locale object.

=back

Then, one of following methods can be used to process the document:

=over 4

=item $process->process_document ($doc => $fh, %option)

Process the source template document and print the serialized form of
the result document to the handle object.  The source document is
parsed and processed as an HTML document.

=item $process->process_fragment ($doc => $fh, %option)

Process the source template document and print the serialized form of
the result document fragment to the handle object.  The source
document is parsed and processed as an HTML document fragment.

=item $process->process_fragment ($doc => $fh, %option)

Process the source template document and print the result plain text
document to the handle object.  The source document is parsed and
processed as a plain text document.

=back

The first argument to these methods must be the Document object
(i.e. an instance of L<Web::DOM::Document>), representing the source
template document.

The second argument to these methods must be the handle object to
which the result document is printed.  The object must have the
C<print> method, whose argument is written to the underlying file.
The argument is a character string.  The method might be invoked with
the empty string to notify buffer-flushing oppotunity.  The object
should also have the C<autoflush> method (See I<IO::Handle> for its
semantics).  They are not expected to throw any exception.

These methods accept following options:

=over 4

=item args => {name => value, NAME => VALUE, ...}

Template-specific arguments, given as name-value pairs.  If the
C<args> option is specified, its value must be a hash reference.
Specified values can be accessed from the template by declaring
parameter using the C<t:params=""> attribute of the root C<html>
element of the template.  The name of the name-value pair is used to
determine the variable name to bound the value.

Example.  If there is a template looks like:

  <!DOCTYPE html>
  <html t:params="$foo $bar">
  ...
  <p><t:text value=$foo>
  <p><t:text value="$bar || 2">

... and the method is invoked with C<args> option:

  $p->process_document ($doc => $fh, args => {
    foo => "Hello",
    bar => 3,
    baz => "abc",
  });

... then the first paragraph will contain a string "Hello" and the
next paragraph will contain a string "3".  Use of variable C<$baz> is
not allowed within the template since it is not listed in the
C<t:params=""> attribute; The C<baz> argument is not accessible from
the template.

=item ondone => CODE

The code reference invoked after the processing is done.  If the code
reference is specified, it is invoked just after the processing has
been done, with the processor object as the first (or zeroth)
argument.  The code reference is not expected to throw any exception.

Example.  If you prefer AnyEvent condvar:

  use AnyEvent;
  
  $cv = AE::cv;
  $processor->process_document ($doc => $fh, ondone => sub {
    $cv->send;
  });

=back

For more information on the template processing, see
L<Temma::Language>.

=head1 LOCALE OBJECT

The locale object used by the template processing can be specified by
the C<locale> object of the processor object.  The locale object must
implement the interface described in this section.

The locale object is expected to expose the set of text message
identified by message IDs (aka message catalog).  How to determine the
language or other locale characteristics in use depends on the
implementation of the locale object and outside of the scope of these
requirements.

The C<for_text_set> method switches the message set in use.  The
locale object specified to the C<locale> method is expected to select
the default message set.  The C<for_text_set> method of the locale
object is expected to return another locale object which is selecting
the message set specified by the argument.  If the specified value
does not identify a message set supported by the locale object, the
method must return an "empty" locale object, i.e. a locale object with
no message available.

The C<plain_text> method is expected to return the plain text
representation of the text message corresponding to the message ID
given as the argument.  The method may return the C<undef> value if no
text message is available for the message ID.

The C<plain_text_as_components> and C<html_as_components> methods are
expected to return the plain text or HTML representation of the text
message corresponding to the message ID given as the argument,
respectively.  The C<plain_text_n_as_components> and
C<html_n_as_components> methods are expected to return plain text or
HTML representation of the text message corresponding to the message
ID and number given as the argument, respectively.  These two methods
are expected to return appropriate form of the message depending on
the number, e.g. singular or plural form.

These four methods are expected to return the "components" data
structure representing the text message.  The return value must be the
value that can be evaluated as an array reference.  The array must
contain zero or more hash references.  Such a hash reference must have
the C<type> value.  If the C<type> value is C<text>, there must be the
C<value> value, which represents the plain text value for the
component.  If the C<type> value is C<html>, there must be the
C<value> value, which represents the HTML value for the component.  If
the C<type> value is C<field>, there must be the C<name> value, which
represents the name of the field (or parameter) for the component.
The C<field> component represents the argument identified by the field
name.  The entire components represent the concatenation of values
represented by each component.  No other C<type> is allowed at the
moment.  The C<html> type is not allowed for
C<plain_text_as_components> and C<plain_text_n_as_components> methods.
These four method may return the C<undef> value if no text message is
available for the message ID.

=head1 SEE ALSO

L<Temma>, L<Temma::Language>.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>.

=head1 LICENSE

Copyright 2012-2016 Wakaba <wakaba@suikawiki.org>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
