#data
ho<msg:foo.bar-baz/>aa
#errors
1;3;m;temma:no locale;;
#output
<!DOCTYPE html><html><body>hofoo.bar-bazaa</body></html>

#data
a<msg:ab.ff.xx/>f
#locale
sub plain_text_as_components {
  return [
    {type => 'text', value => 'a&<>"'},
  ];
}
#output
<!DOCTYPE html><html><body>aa&amp;&lt;&gt;&quot;f</body></html>

#data
a<msg:ffzz>
  <t:field>{1}
  <t:field>{2}
</msg:ffzz>x
#locale
sub plain_text_as_components {
  return [
    {type => 'text', value => $_[1]},
    {type => 'field', name => 1},
    {type => 'text', value => '?'},
    {type => 'field', name => 2},
    {type => 'field', name => 3},
  ];
}
#output
<!DOCTYPE html><html><body>affzz{1}?{2}x</body></html>

#data
a<msg:ffzz>{x}</msg:ffzz>x
#locale
sub plain_text_as_components {
  return [
    {type => 'text', value => $_[1]},
    {type => 'field', name => 1},
    {type => 'text', value => '?'},
    {type => 'field', name => 2},
    {type => 'field', name => 3},
  ];
}
#output
<!DOCTYPE html><html><body>affzz{x}?x</body></html>

#data
a<msg:ffzz>{<p>x</p>}</msg:ffzz>x
#locale
sub plain_text_as_components {
  return [
    {type => 'text', value => $_[1]},
    {type => 'field', name => 1},
    {type => 'text', value => '?'},
    {type => 'field', name => 2},
    {type => 'field', name => 3},
  ];
}
#output
<!DOCTYPE html><html><body>affzz{<p>x</p>}?x</body></html>

#data
<msg:foobar.baz/>
#errors
1;1;m;temma:no locale;;
#output
<!DOCTYPE html><html><body>foobar.baz</body></html>

#data
<msg:foobar&baz< />
#errors
1;1;m;temma:no locale;;
#output
<!DOCTYPE html><html><body>foobar&amp;baz&lt;</body></html>

#data
<msg:foobar&baz<>
#locale
sub plain_text_as_components {
  return;
}
#errors
#output
<!DOCTYPE html><html><body>foobar&amp;baz&lt;</body></html>

#data
<msg:hoge.fuga/>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => ""}];
}
#output escaped
<!DOCTYPE html><html><body></body></html>

#data
<msg:hoge.fuga/>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => "???" . $_[1] . "???"},
          {type => 'text', value => scalar @_}];
}
#output escaped
<!DOCTYPE html><html><body>???hoge.fuga???2</body></html>

#data
<MSG:foo/>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'ab & <>'}];
}
#output
<!DOCTYPE html><html><body>ab &amp; &lt;&gt;</body></html>

#data
<Msg:foo/>
#locale
sub plain_text_as_components {
  return [{type => 'html', value => 'ab & <>'},
          {type => 'text', value => 12}];
}
#errors
1;1;m;temma:components:unknown type;html;
#output
<!DOCTYPE html><html><body>12</body></html>

#data
<msg:hoge.fuga/>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => "0"}];
}
#output escaped
<!DOCTYPE html><html><body>0</body></html>

#data
<msg:hoge.fuga/>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => "\x{4e00}\x{3000}abc d0"}];
}
#output escaped
<!DOCTYPE html><html><body>\u4e00\u3000abc d0</body></html>

#data
<msg:hoge.fuga/>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => "\x{4e00}\x{3000}"},
          {type => 'text', value => 'abc d0'}];
}
#output escaped
<!DOCTYPE html><html><body>\u4e00\u3000abc d0</body></html>

#data
<msg:hoge.fuga/>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'Q & A <p>'}];
}
#output escaped
<!DOCTYPE html><html><body>Q &amp; A &lt;p&gt;</body></html>

#data
<title t:parse><msg:hoge.fuga/></title>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'Q & A <p>'}];
}
#output escaped
<!DOCTYPE html><html><head><title>Q &amp; A &lt;p&gt;</title></head></html>

#data
<style t:parse><msg:hoge.fuga/></style>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'Q & A <p>'}];
}
#output escaped
<!DOCTYPE html><html><head><style>Q & A <p></style></head></html>

#data
<script t:parse><msg:hoge.fuga/></script>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'Q & A <p></script>a'}];
}
#errors
1;1;m;temma:not representable in raw text;;
#output escaped
<!DOCTYPE html><html><head><script>Q & A <p></script></head></html>

#data
<script t:parse><msg:hoge.fuga/></script>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'Q & A <p></scr'},
          {type => 'text', value => 'ipt>a'}];
}
#errors
1;1;m;temma:not representable in raw text;;
#output escaped
<!DOCTYPE html><html><head><script>Q & A <p></script></head></html>

#data
<t:comment><msg:hoge.fuga/></t:comment>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'Q & A <p>--</script>a-'}];
}
#errors
#output escaped
<!DOCTYPE html><html><head><!--Q & A <p>- - </script>a- --></head></html>

#data
<msg:hoge/>
#locale
sub plain_text_as_components {
  return [];
}
#output
<!DOCTYPE html><html><body></body></html>

#data
<msg:hoge/>
#locale
sub plain_text_as_components {
  return undef;
}
#output
<!DOCTYPE html><html><body>hoge</body></html>

#data
<msg:hoge/>
#locale
sub plain_text_as_components {
  return 5125;
}
#output
<!DOCTYPE html><html><body>hoge</body></html>

#data
<msg:hoge/>
#locale
sub plain_text_as_components {
  return {fuga => 5125};
}
#output
<!DOCTYPE html><html><body>hoge</body></html>

#data
<msg:hoge/>abc
#locale
sub plain_text_as_components {
  return [{type => 'u n k n o w n'}, {type => 'text', value => 12}];
}
#errors
1;1;m;temma:components:unknown type;u n k n o w n;
#output
<!DOCTYPE html><html><body>12abc</body></html>

#data
<msg:foo/>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'ac'},
          {type => 'field', name => 1},
          {type => 'text', value => 'xy'}];
}
#errors
#output
<!DOCTYPE html><html><body>acxy</body></html>

#data
<msg:foo t:parse>
  ABC
</>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'ac'},
          {type => 'field', name => 1},
          {type => 'text', value => 'xy'}];
}
#errors
#output
<!DOCTYPE html><html><body>acABCxy</body></html>

#data
<msg:foo>
  AB<p>C
</>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'ac'},
          {type => 'field', name => 1},
          {type => 'text', value => 'xy'}];
}
#errors
#output
<!DOCTYPE html><html><body>acAB<p>C</p>xy</body></html>

#data
<msg:foo>
  AB<t:wait cv="Test::Temma::CV->new">C
</msg:foo>v
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'ac'},
          {type => 'field', name => 1},
          {type => 'text', value => 'xy'}];
}
#errors
#output
<!DOCTYPE html><html><body>acABCxyv</body></html>

#data
<msg:foo>
  AB
  <t:field>
    CD
</msg:foo>v
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'ac'},
          {type => 'field', name => 2},
          {type => 'text', value => 'xy'},
          {type => 'field', name => 1}];
}
#errors
#output
<!DOCTYPE html><html><body>acCDxyABv</body></html>

#data
<msg:foo t:space=preserve>
  AB
  <t:field>
    CD
</></>v
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'ac'},
          {type => 'field', name => 2},
          {type => 'text', value => 'xy'},
          {type => 'field', name => 1}];
}
#errors
#output
<!DOCTYPE html><html><body>ac
    CD
xyAB
  v</body></html>

#data
<msg:foo t:space=preserve>
  AB
  <t:field t:space=trim>
    CD
</></>v
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'ac'},
          {type => 'field', name => 2},
          {type => 'text', value => 'xy'},
          {type => 'field', name => 1}];
}
#errors
#output
<!DOCTYPE html><html><body>acCDxyAB
  v</body></html>

#data
<msg:foo t:parse>
  <t:field name=fuga>
  AB
  <t:field t:space=trim>
    CD
</></>v
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'ac'},
          {type => 'field', name => "hoge"},
          {type => 'text', value => 'xy'},
          {type => 'field', name => "fuga"}];
}
#errors
#output
<!DOCTYPE html><html><body>acxyABv</body></html>

#data
<t:macro name=abc>
  <b>
    <msg:foobar t:parse>
      <t:content>
    </></>
  </b>
</t:macro>
<p><m:abc>hoge<i>fuga</i></m:abc>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => 'FOOBAR = '},
          {type => 'field', name => 1}];
}
#output
<!DOCTYPE html><html><head></head><body><p><b>FOOBAR = hoge<i>fuga</i></b></p></body></html>

#data
<msg:hoge n=12 />
#errors
1;1;m;temma:no locale;;
#output
<!DOCTYPE html><html><body>hoge</body></html>

#data
<msg:hoge n=12 />
#locale
sub plain_text_n_as_components {
  return [{type => 'text', value => $_[1] . '[' . $_[2] . ']'}];
}
#output
<!DOCTYPE html><html><body>hoge[12]</body></html>

#data
<msg:hoge n=12 t:parse>
  fuga
</></>
#locale
sub plain_text_n_as_components {
  return [{type => 'text', value => $_[1] . '[' . $_[2] . ']'},
          {type => 'field', name => 1}];
}
#output
<!DOCTYPE html><html><body>hoge[12]fuga</body></html>

#data
<msg:hoge n=12*20 t:parse>
  fuga
</></>
#locale
sub plain_text_n_as_components {
  return [{type => 'text', value => $_[1] . '[' . $_[2] . ']'},
          {type => 'field', name => 1}];
}
#output
<!DOCTYPE html><html><body>hoge[240]fuga</body></html>

#data
<msg:hoge n=undef t:parse>
  fuga
</></>
#locale
sub plain_text_as_components {
  return [{type => 'text', value => $_[1] . '[' . (defined $_[2]) . ']'},
          {type => 'field', name => 1}];
}
#output
<!DOCTYPE html><html><body>hoge[]fuga</body></html>

#data
<msg:hoge n=0 t:parse>
  fuga
</></>
#locale
sub plain_text_n_as_components {
  return [{type => 'text', value => $_[1] . '[' . $_[2] . ']'},
          {type => 'field', name => 1}];
}
#output
<!DOCTYPE html><html><body>hoge[0]fuga</body></html>

#data
<msg:hoge n="'abc'" t:parse>
  fuga
</></>
#locale
sub plain_text_n_as_components {
  return [{type => 'text', value => $_[1] . '[' . $_[2] . ']'},
          {type => 'field', name => 1}];
}
#output
<!DOCTYPE html><html><body>hoge[0]fuga</body></html>

#data
<msg:hoge alt="&#x1240;xaa"/>hoge
#errors
1;1;m;temma:no locale;;
#output escaped
<!DOCTYPE html><html><body>\u1240xaahoge</body></html>

#data
<msg:hoge alt="&#x1240;xaa <p>" barehtml />hoge
#errors
1;1;m;temma:no locale;;
#output escaped
<!DOCTYPE html><html><body>\u1240xaa &lt;p&gt;hoge</body></html>

#data
<msg:hoge set=fuga />
#locale
sub for_text_set {
  $_[0]->{text_set} = $_[1];
  return $_[0];
}
sub plain_text_as_components {
  return [{type => 'text', value => $_[1] . ' of ' . $_[0]->{text_set}}];
}
#output
<!DOCTYPE html><html><body>hoge of fuga</body></html>

#data
<p><msg:hoge.fuga barehtml />
#errors
1;4;m;temma:no locale;;
#output
<!DOCTYPE html><html><body><p>hoge.fuga</p></body></html>

#data
<p><msg:hoge&fuga< barehtml />
#errors
1;4;m;temma:no locale;;
#output
<!DOCTYPE html><html><body><p>hoge&amp;fuga&lt;</p></body></html>

#data
<msg:foobar&baz< barehtml />
#locale
sub html_as_components {
  return;
}
#errors
#output
<!DOCTYPE html><html><body>foobar&amp;baz&lt;</body></html>

#data
<msg:foo barehtml />
#locale
sub html_as_components {
  return [{type => 'text', value => 'ab & <>'}];
}
#output
<!DOCTYPE html><html><body>ab &amp; &lt;&gt;</body></html>

#data
<Msg:foo BareHTML />
#locale
sub html_as_components {
  return [{type => 'html', value => 'ab & <>'}];
}
#output
<!DOCTYPE html><html><body>ab & <></body></html>

#data
<Msg:foo barehtml>
  hoge&
</></>
#locale
sub html_as_components {
  return [{type => 'html', value => 'ab & <>'},
          {type => 'field', name => 1}];
}
#output
<!DOCTYPE html><html><body>ab & <>hoge&amp;</body></html>

#data
<msg:foo barehtml>
  hoge&  <t:field>&lt;
</></>
#locale
sub html_as_components {
  return [{type => 'html', value => 'ab & <>'},
          {type => 'field', name => 2},
          {type => 'html', value => '>'},
          {type => 'field', name => 1}];
}
#output
<!DOCTYPE html><html><body>ab & <>&lt;>hoge&amp;</body></html>

#data
<msg:foo barehtml n=5>
  hoge&  <t:field>&lt;
</></>
#locale
sub html_n_as_components {
  return [{type => 'html', value => 'ab & <>' . $_[2]},
          {type => 'field', name => 2},
          {type => 'html', value => '>'},
          {type => 'field', name => 1}];
}
#output
<!DOCTYPE html><html><body>ab & <>5&lt;>hoge&amp;</body></html>

#data
<msg:foo barehtml n=6-1>
  hoge&  <t:field>&lt;
</></>
#locale
sub html_n_as_components {
  return [{type => 'html', value => 'ab & <>' . $_[2]},
          {type => 'field', name => 2},
          {type => 'html', value => '>'},
          {type => 'field', name => 1}];
}
#output
<!DOCTYPE html><html><body>ab & <>5&lt;>hoge&amp;</body></html>

#data
<msg:hoge set=fuga barehtml />
#locale
sub for_text_set {
  $_[0]->{text_set} = $_[1];
  return $_[0];
}
sub html_as_components {
  return [{type => 'text', value => $_[1] . ' of ' . $_[0]->{text_set}}];
}
#output
<!DOCTYPE html><html><body>hoge of fuga</body></html>
