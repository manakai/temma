#data
<t:wait cv=" Test::Temma::CV->new ">
#output
<!DOCTYPE html><html><head></head></html>

#data
<t:wait cv=" Test::Temma::CV->new ">hoge
#output
<!DOCTYPE html><html><head></head><body>hoge</body></html>

#data
<t:wait cv=" Test::Temma::CV->new ">hoge
<t:wait cv=" Test::Temma::CV->new ">fuga
#output
<!DOCTYPE html><html><head></head><body>hoge
fuga</body></html>

#data
<p>
  <t:wait cv="Test::Temma::CV->new">
  <t:attr name="'class'" value=123>
</p>
#output
<!DOCTYPE html><html><body><p class="123"></p></body></html>

#data
<script t:parse>
  <t:wait cv="Test::Temma::CV->new">
  <t:attr name="'class'" value=123>
  abc
</script>
#errors
3;3;m;temma:start tag already closed;;
#output
| <!DOCTYPE html><html><head><script>
|   
|   
|   abc
| </script></head></html>

#data
<script t:parse t:space=trim>
  <t:wait cv="Test::Temma::CV->new">
  <t:attr name="'class'" value=123>
  abc
</script>
#errors
#output
| <!DOCTYPE html><html><head><script class="123">abc</script></head></html>

#data
<script t:parse t:space=trim>
  <t:wait cv="Test::Temma::CV->new">
  <t:attr name="'class'" value=123>
  abc&lt;/script>x
</script>
#errors
1;1;m;temma:not representable in raw text;;
#output
| <!DOCTYPE html><html><head><script class="123">abc</script></head></html>

#data
<t:comment>
  hoge
  <t:wait cv="Test::Temma::CV->new">
</t:comment>
#errors
#output
| <!DOCTYPE html><html><head><!--
|   hoge
|   
| --></head></html>

#data
hoge<t:wait cv="Test::Temma::CV->new" cb="
  our $hoge = 'ab cd';
"><t:text value=" our $hoge "/>x
#output
<!DOCTYPE html><html><body>hogeab cdx</body></html>

#data
a<t:wait cv=undef>b
#errors
1;10;m;temma:undef;;
#output
<!DOCTYPE html><html><body>ab</body></html>

#data
a<t:wait cv="'xya'">b
#errors
1;10;m;temma:no cb method;;
#output
<!DOCTYPE html><html><body>ab</body></html>

#data
a<t:wait cv="[]">b
#errors
1;10;m;temma:no cb method;;
#output
<!DOCTYPE html><html><body>ab</body></html>

#data
a<t:wait cv="bless {}, 'hoge::fuga'">b
#errors
1;10;m;temma:no cb method;;
#output
<!DOCTYPE html><html><body>ab</body></html>

#data
a<t:wait cv="
  my $pack = 'hoge::fuga::' . int rand 40000;
  eval qq{
    sub $pack\::cb { }
  };
  bless {}, $pack;
">b
#errors
#output
<!DOCTYPE html><html><body>a

#data
a<t:wait cv="
  my $pack = 'hoge::fuga::' . int rand 40000;
  eval qq{#line 1 hoge::fuga::x::cb
    sub $pack\::cb { \$_[0]->{cb} = \$_[1]; die 123 }
    sub $pack\::send { \$_[0]->{cb}->() }
  };
  my $obj = bless {}, $pack;
  push @Test::Temma::CV::Instance, $obj;
  return $obj;
">b
#errors escaped
1;10;m;temma:perl exception:cb;123 at hoge::fuga::x::cb line 1.\u000A;
#output
<!DOCTYPE html><html><body>ab</body></html>

#data
a<t:wait cv="new Test::Temma::CV" cb=" die 123 ">b
#errors escaped
1;35;m;temma:perl exception;123 at html>body>t:wait[cb] (at line 1 column 35) line 1.\u000A;
#output
<!DOCTYPE html><html><body>a</body></html>

#data
a<t:wait cv="new Test::Temma::CV">b<t:text value=die>c
#errors escaped
1;44;m;temma:perl exception;Died at html>body>t:text[value] (at line 1 column 44) line 1.\u000A;
#output
<!DOCTYPE html><html><body>ab</body></html>

#data
a<t:wait cv=' our $hoge = (defined wantarray ? 1 : 0) . (wantarray ? 1 : 0); new Test::Temma::CV '><t:text value=our$hoge>
#output
<!DOCTYPE html><html><body>a10</body></html>
